{"remainingRequest":"/Users/andrew/Projects/Andrew/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrew/Projects/Andrew/portfolio/src/components/Projects.vue?vue&type=template&id=60dc6baa&","dependencies":[{"path":"/Users/andrew/Projects/Andrew/portfolio/src/components/Projects.vue","mtime":1586349430661},{"path":"/Users/andrew/Projects/Andrew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1578559901126},{"path":"/Users/andrew/Projects/Andrew/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1578559903584},{"path":"/Users/andrew/Projects/Andrew/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1578559901126},{"path":"/Users/andrew/Projects/Andrew/portfolio/node_modules/vue-loader/lib/index.js","mtime":1578559903584}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}