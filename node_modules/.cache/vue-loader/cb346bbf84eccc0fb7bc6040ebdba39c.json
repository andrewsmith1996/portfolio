{"remainingRequest":"/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/src/components/Projects.vue?vue&type=template&id=60dc6baa&","dependencies":[{"path":"/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/src/components/Projects.vue","mtime":1578591627172},{"path":"/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Andrew/Desktop/Dev/vue-portfolios/portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}