{"remainingRequest":"/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Andrew/Desktop/Dev/vue-js-portfolio/src/components/Projects.vue?vue&type=template&id=60dc6baa&","dependencies":[{"path":"/Users/Andrew/Desktop/Dev/vue-js-portfolio/src/components/Projects.vue","mtime":1578505343168},{"path":"/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Andrew/Desktop/Dev/vue-js-portfolio/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}